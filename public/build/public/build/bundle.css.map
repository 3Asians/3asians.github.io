{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\TableSort.svelte",
    "..\\..\\Component.svelte"
  ],
  "sourcesContent": [
    "<script>\n    const CLASSNAME_TABLE = 'tablesort'\n    const CLASSNAME_SORTABLE = 'sortable'\n    const CLASSNAME_ASC = 'ascending'\n    const CLASSNAME_DESC = 'descending'\n\n    import { onMount } from 'svelte'\n    import {\n        sortFunction,\n        compareStrings,\n        compareNumbers,\n    } from 'generator-sort'\n    export let items\n    let className = ''\n    export { className as class }\n\n    let thead\n    let sortOrder = [[]]\n\n    $: sortedItems = sorted([...items], sortOrder)\n\n    const sorted = function(arr, sortOrder) {\n        arr.sort(\n            sortFunction(function*(a, b) {\n                for (let [fieldName, r] of sortOrder) {\n                    const reverse = r === 0 ? 1 : -1\n                    if (typeof a[fieldName] === 'number') {\n                        yield reverse *\n                            compareNumbers(a[fieldName], b[fieldName])\n                    } else {\n                        yield reverse *\n                            compareStrings(a[fieldName], b[fieldName])\n                    }\n                }\n            })\n        )\n\n        return arr\n    }\n\n    function updateSortOrder(th, push) {\n        const fieldName = th.dataset.sort\n        if (push) {\n            if (sortOrder[sortOrder.length - 1][0] === fieldName) {\n                sortOrder[sortOrder.length - 1] = [\n                    fieldName,\n                    (sortOrder[sortOrder.length - 1][1] + 1) % 2,\n                ]\n            } else {\n                sortOrder = [...sortOrder, [fieldName, 0]]\n            }\n        } else {\n            if (sortOrder.length === 1 && sortOrder[0][0] === fieldName) {\n                sortOrder[0] = [fieldName, (sortOrder[0][1] + 1) % 2]\n            } else {\n                resetClasses()\n                sortOrder = [[fieldName, 0]]\n            }\n        }\n        th.className =\n            CLASSNAME_SORTABLE +\n            ' ' +\n            (sortOrder[sortOrder.length - 1][1]\n                ? CLASSNAME_DESC\n                : CLASSNAME_ASC)\n    }\n\n    function resetClasses() {\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n            }\n        }\n    }\n\n    onMount(() => {\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n                th[i].onclick = (event) =>\n                    updateSortOrder(th[i], event.shiftKey)\n            }\n            if (th[i].dataset.sortInitial === 'descending') {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_DESC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 1]]\n            } else if (th[i].dataset.sortInitial != undefined) {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_ASC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 0]]\n            }\n        }\n    })\n</script>\n\n<style>\n    thead :global(th.sortable) {\n        cursor: pointer;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n</style>\n\n<table class=\"{CLASSNAME_TABLE} {className}\">\n    <thead bind:this={thead}>\n        <slot name=\"thead\" />\n    </thead>\n    <tbody>\n        {#each sortedItems as item}\n            <slot name=\"tbody\" {item} />\n        {/each}\n    </tbody>\n    <tfoot>\n        <slot name=\"tfoot\" />\n    </tfoot>\n</table>\n",
    "<script>\r\n\texport let item;\r\n\texport let distance;\r\n</script>\r\n\r\n<style>\r\n\tspan{\r\n\t\tbackground-color: #ddd;\r\n\t\tborder-radius: 4px;\r\n\t\tpadding: 0 1em;\r\n\t\tfont-size: .5em;\r\n\t}\r\n</style>\r\n\r\n<h1>\r\n\t<span>{distance}</span> {item.RestaurantName}\r\n</h1>"
  ],
  "names": [],
  "mappings": "AAgGI,oBAAK,CAAC,AAAQ,WAAW,AAAE,CAAC,AACxB,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,AACzB,CAAC;AChGJ,mBAAI,CAAC,AACJ,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,SAAS,CAAE,IAAI,AAChB,CAAC"
}